buildscript {
	repositories {
		mavenCentral()
	}
}

plugins {
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'org.asciidoctor.convert' version '1.5.8'
	id 'java'
}

group = 'com.casinoroyale'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springCloudVersion', "Hoxton.SR8")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springframework.kafka:spring-kafka'
	compile 'com.google.guava:guava:29.0-jre'
	compile group: 'org.joda', name: 'joda-money', version: '0.12'
	compile group: 'me.alidg', name: 'errors-spring-boot-starter', version: '1.4.0'
	compile 'org.apache.commons:commons-lang3:3.11'
	compile 'org.jadira.usertype:usertype.core:7.0.0.CR1'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.assertj:assertj-core:3.17.2'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
	exclude '**/*IT.class'
}

task integrationTest(type: Test, dependsOn: [classes, testClasses]) {

	doFirst {
		println '******************************************************************************************************'
		println '* Starting integrationTest task:                                                                 *'
		println '******************************************************************************************************'
	}

	include '**/*IT.class'
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}
